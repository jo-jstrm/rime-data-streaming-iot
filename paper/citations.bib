@article{hung2019gartner,
	title = {Gartner Insights on How to Lead in a Connected World},
	pages = {29},
	author = {Hung, Mark},
	date = {2019},
	langid = {english},
	file = {Hung - Gartner Insights on How to Lead in a Connected Wor.pdf:C\:\\Users\\jjest\\Zotero\\storage\\BSYM6R3B\\Hung - Gartner Insights on How to Lead in a Connected Wor.pdf:application/pdf}
}

@article{mcarthur2020gartner,
	title = {Predicts 2021: Cloud and Edge Infrastructure},
	author = {McArthur, John and Chandrasekaran, Arun and Bittman, Thomas},
	date = {December 2020},
	url = {https://www.gartner.com/en/documents/3994091/predicts-2021-cloud-and-edge-infrastructure},
	year = {Accessed 2021-04-05}
}

@inproceedings{symeonides2020fogify,
  title={Fogify: A fog computing emulation framework},
  author={Symeonides, Moysis and Georgiou, Zacharias and Trihinas, Demetris and Pallis, George and Dikaiakos, Marios D},
  booktitle={Symposium on Edge Computing (SEC)},
  year={2020},
  organization={IEEE/ACM}
}

@inproceedings{zhang2020gallium,
  title={Gallium: Automated Software Middlebox Offloading to Programmable Switches},
  author={Zhang, Kaiyuan and Zhuo, Danyang and Krishnamurthy, Arvind},
  booktitle={SIGCOMM},
  year={2020}
}

@inproceedings{li2020beyond,
  title={Beyond 5G: Reliable Extreme Mobility Management},
  author={Li, Yuanjie and Li, Qianru and Zhang, Zhehui and Baig, Ghufran and Qiu, Lili and Lu, Songwu},
  booktitle={SIGCOMM},
  year={2020}
}

@inproceedings{chao2020r,
  title={R-MStorm: A resilient mobile stream processing system for dynamic edge networks},
  author={Chao, Mengyuan and Stoleru, Radu},
  booktitle={ICFC},
  year={2020},
}

@article{levis2008emergence,
  title={The emergence of a networking primitive in wireless sensor networks},
  author={Levis, Philip and Brewer, Eric and Culler, David and Gay, David and Madden, Samuel and Patel, Neil and Polastre, Joe and Shenker, Scott and Szewczyk, Robert and Woo, Alec},
  journal={Communications of the ACM},
  year={2008},
}

@inproceedings{yuriyama2010sensor,
  title={Sensor-cloud infrastructure-physical sensor management with virtualized sensors on cloud computing},
  author={Yuriyama, Madoka and Kushida, Takayuki},
  booktitle={NBiS},
  year={2010},
}

@inproceedings{bonomi2012fog,
  title={Fog computing and its role in the internet of things},
  author={Bonomi, Flavio and Milito, Rodolfo and Zhu, Jiang and Addepalli, Sateesh},
  booktitle={SIGCOMM MCC},
  year={2012}
}

@article{shi2016edge,
  title={Edge computing: Vision and challenges},
  author={Shi, Weisong and Cao, Jie and Zhang, Quan and Li, Youhuizi and Xu, Lanyu},
  journal={IEEE Internet of Things Journal},
  year={2016},
}

@book{muhl2006distributed,
  title={Distributed event-based systems},
  author={M{\"u}hl, Gero and Fiege, Ludger and Pietzuch, Peter},
  year={2006},
  publisher={Springer Science \& Business Media}
}

@book{aggarwal2013managing,
  title={Managing and mining sensor data},
  author={Aggarwal, Charu C},
  year={2013},
  publisher={Springer Science \& Business Media}
}

@article{satyanarayanan2009case,
  title={The case for vm-based cloudlets in mobile computing},
  author={Satyanarayanan, Mahadev and Bahl, Paramvir and Caceres, Ram{\'o}n and Davies, Nigel},
  journal={IEEE Pervasive Computing},
  year={2009},
}

@article{potharaju2020helios,
  title={Helios: hyperscale indexing for the cloud \& edge},
  author={Potharaju, Rahul and Kim, Terry and Wu, Wentao and Acharya, Vidip and Suh, Steve and Fogarty, Andrew and Dave, Apoorve and Ramanujam, Sinduja and Talius, Tomas and Novik, Lev and others},
  journal={Proceedings of the VLDB Endowment},
  volume={13},
  number={12},
  pages={3231--3244},
  year={2020},
  publisher={VLDB Endowment}
}

@inproceedings{denby2020orbital,
  title={Orbital Edge Computing: Nanosatellite Constellations as a New Class of Computer System},
  author={Denby, Bradley and Lucia, Brandon},
  booktitle={Proceedings of the Twenty-Fifth International Conference on Architectural Support for Programming Languages and Operating Systems},
  pages={939--954},
  year={2020}
}

@inproceedings{lerner2019cidr,
  author = {Lerner, Alberto and Hussein, Rana and Cudr{\'e}-Mauroux, Philippe},
  title = {The Case For Network Accelerated Query Processing},
  booktitle = {CIDR},
  year = {2019},
}

@inproceedings{woo2001transmission,
  title={A transmission control scheme for media access in sensor networks},
  author={Woo, Alec and Culler, David E},
  booktitle={MobiCom},
  year={2001}
}

@article{madden2005tinydb,
  title={TinyDB: an acquisitional query processing system for sensor networks},
  author={Madden, Samuel R and Franklin, Michael J and Hellerstein, Joseph M and Hong, Wei},
  journal={TODS},
  year={2005},
}

@inproceedings{pietzuch2006network,
  title={Network-aware operator placement for stream-processing systems},
  author={Pietzuch, Peter and Ledlie, Jonathan and Shneidman, Jeffrey and Roussopoulos, Mema and Welsh, Matt and Seltzer, Margo},
  booktitle={ICDE},
  year={2006},
}

@inproceedings{pagliari2019cost,
  title={On the cost of acking in data stream processing systems},
  author={Pagliari, Alessio and Huet, Fabrice and Urvoy-Keller, Guillaume},
  year={2019}
}

@article{zeuch2019analyzing,
  title={Analyzing efficient stream processing on modern hardware},
  author={Zeuch, Steffen and Monte, Bonaventura Del and Karimov, Jeyhun and Lutz, Clemens and Renz, Manuel and Traub, Jonas and Bre{\ss}, Sebastian and Rabl, Tilmann and Markl, Volker},
  journal={VLDB},
  year={2019},
}

@article{akyildiz2002wireless,
  title={Wireless sensor networks: a survey},
  author={Akyildiz, Ian F and Su, Weilian and Sankarasubramaniam, Yogesh and Cayirci, Erdal},
  journal={Computer Networks},
  year={2002},
  publisher={Elsevier}
}

@article{okeeffe2018frontier,
	title = {Frontier: resilient edge processing for the internet of things},
	journal = {VLDB},
	author = {O'Keeffe, Dan and Salonidis, Theodoros and Pietzuch, Peter},
	year = {2018}
}

@article{miorandi_internet_2012,
	title = {Internet of things: Vision, applications and research challenges},
	volume = {10},
	issn = {15708705},
	doi = {10.1016/j.adhoc.2012.02.016},
	shorttitle = {Internet of things},
	abstract = {The term ‘‘Internet-of-Things’’ is used as an umbrella keyword for covering various aspects related to the extension of the Internet and the Web into the physical realm, by means of the widespread deployment of spatially distributed devices with embedded identiﬁcation, sensing and/or actuation capabilities. Internet-of-Things envisions a future in which digital and physical entities can be linked, by means of appropriate information and communication technologies, to enable a whole new class of applications and services. In this article, we present a survey of technologies, applications and research challenges for Internetof-Things.},
	pages = {1497--1516},
	number = {7},
	journaltitle = {Ad Hoc Networks},
	shortjournal = {Ad Hoc Networks},
	author = {Miorandi, Daniele and Sicari, Sabrina and De Pellegrini, Francesco and Chlamtac, Imrich},
	urldate = {2019-10-22},
	date = {2012-09},
	langid = {english},
	file = {Miorandi et al. - 2012 - Internet of things Vision, applications and resea.pdf:C\:\\Users\\jjest\\Zotero\\storage\\8QZSZGRP\\Miorandi et al. - 2012 - Internet of things Vision, applications and resea.pdf:application/pdf}
}

@article{abadi_aurora_2003,
	title = {Aurora: a new model and architecture for data stream management},
	volume = {12},
	issn = {1066-8888, 0949-877X},
	doi = {10.1007/s00778-003-0095-z},
	shorttitle = {Aurora},
	abstract = {This paper describes the basic processing model and architecture of Aurora, a new system to manage data streams for monitoring applications. Monitoring applications differ substantially from conventional business data processing. The fact that a software system must process and react to continual inputs from many sources (e.g., sensors) rather than from human operators requires one to rethink the fundamental architecture of a {DBMS} for this application area. In this paper, we present Aurora, a new {DBMS} currently under construction at Brandeis University, Brown University, and M.I.T. We ﬁrst provide an overview of the basic Aurora model and architecture and then describe in detail a stream-oriented set of operators.},
	pages = {120--139},
	number = {2},
	journaltitle = {The {VLDB} Journal The International Journal on Very Large Data Bases},
	shortjournal = {The {VLDB} Journal The International Journal on Very Large Data Bases},
	author = {Abadi, Daniel J. and Carney, Don and Cetintemel, Ugur and Cherniack, Mitch and Convey, Christian and Lee, Sangdon and Stonebraker, Michael and Tatbul, Nesime and Zdonik, Stan},
	urldate = {2020-01-18},
	date = {2003-08-01},
	langid = {english},
	file = {Abadi et al. - 2003 - Aurora a new model and architecture for data stre.pdf:C\:\\Users\\jjest\\Zotero\\storage\\9GJT35QV\\Abadi et al. - 2003 - Aurora a new model and architecture for data stre.pdf:application/pdf}
}

@article{brooks_component_2018,
	title = {A Component Architecture for the Internet of Things},
	volume = {106},
	issn = {0018-9219, 1558-2256},
	doi = {10.1109/JPROC.2018.2812598},
	abstract = {We describe a component-based software architecture for the Internet of Things in which proxies for Things and services that we call “accessors” interact with one another under a concurrent, time-stamped, discrete-event ({DE}) semantics. These proxies are analogous to web pages, which proxy a cloud-based service such as a bank, but instead of being designed to interface those services with humans, accessors are designed to interface services and Things with other services and Things. A deterministic {DE} semantics is combined with a widely used pattern for handling network interactions that we call “asynchronous atomic callbacks” ({AAC}). {AAC} enables many concurrent pending requests to be active at once without blocking and without the treacherous concurrency pitfalls of threads. In effect, our architecture combines {AAC} with actors where the actor model has been endowed with a temporal semantics. We show how this architecture can leverage the previously reported Secure Swarm Toolkit ({SST}) to achieve state-of-the-art authentication, authorization, and encryption of interactions across networks.},
	pages = {1527--1542},
	number = {9},
	journaltitle = {Proceedings of the {IEEE}},
	shortjournal = {Proc. {IEEE}},
	author = {Brooks, Christopher and Jerad, Chadlia and Kim, Hokeun and Lee, Edward A. and Lohstroh, Marten and Nouvelletz, Victor and Osyk, Beth and Weber, Matt},
	urldate = {2020-01-22},
	date = {2018-09},
	langid = {english},
	file = {Brooks et al. - 2018 - A Component Architecture for the Internet of Thing.pdf:C\:\\Users\\jjest\\Zotero\\storage\\KAWLJUS2\\Brooks et al. - 2018 - A Component Architecture for the Internet of Thing.pdf:application/pdf}
}

@article{wang_modeling_nodate,
	title = {Modeling and Building {IoT} Data Platforms with Actor-Oriented Databases},
	abstract = {Vast amounts of data are being generated daily with the adoption of Internet-of-Things ({IoT}) solutions in an ever-increasing number of application domains. There are problems associated with all stages of the lifecycle of these data (e.g., capture, curation and preservation). Moreover, the volume, variety, dynamicity and ubiquity of {IoT} data present additional challenges to their usability, prompting the need for constructing scalable dataintensive {IoT} data management and processing platforms. This paper presents a novel approach to model and build {IoT} data platforms based on the characteristics of an Actor-Oriented Database ({AODB}). We take advantage of two complementary case studies –in structural health monitoring and beef cattle tracking and tracing – to describe novel software requirements introduced by {IoT} data processing. Our investigation illustrates the challenges and benefits provided by {AODB} to meet these requirements in terms of modeling and {IoT}-based systems implementation. Obtained results reveal the advantages of using {AODB} in {IoT} scenarios and lead to principles on how to effectively use an actor model to design and implement {IoT} data platforms.},
	pages = {12},
	author = {Wang, Yiwen and Reis, Julio Cesar Dos and Borggren, Kasper Myrtue},
	langid = {english},
	file = {Wang et al. - Modeling and Building IoT Data Platforms with Acto.pdf:C\:\\Users\\jjest\\Zotero\\storage\\BYYWWHTI\\Wang et al. - Modeling and Building IoT Data Platforms with Acto.pdf:application/pdf}
}

@article{shah_actor-relational_2018,
	title = {Actor-Relational Database Systems: A Manifesto},
	shorttitle = {Actor-Relational Database Systems},
	abstract = {Interactive data-intensive applications are becoming ever more pervasive in domains such as ﬁnance, web applications, mobile computing, and Internet of Things. Increasingly, these applications are being deployed in sophisticated parallel and distributed hardware infrastructures. With this growing diversity of the software and hardware landscape, there is a pressure on programming models and systems to enable developers to design modular, scalable, efﬁcient, and consistent data-intensive applications. In response to this challenge, recent research has advocated the integration of actor programming models and database management. This integration promises to help developers build logically distributed microapplications well adapted to modern hardware trends as opposed to existing approaches targeted at optimizing monolithic applications. Towards this aim, in this paper we analyze, make the case for, and present a broad vision of actor-relational database systems. We argue why the time is ripe today to examine the research opportunities afforded by this emerging system paradigm. Based on this discussion, we present design principles as well as candidate feature sets to help concretize the vision for such systems. To illustrate the usefulness of the proposed feature set and motivate the need for this class of systems, we show a detailed case study inspired by a smart supermarket application with self-checkout, along with evidence for performance beneﬁts on modern hardware.},
	journaltitle = {{arXiv}:1707.06507 [cs]},
	author = {Shah, Vivek and Salles, Marcos Antonio Vaz},
	urldate = {2020-01-22},
	date = {2018-09-10},
	langid = {english},
	eprinttype = {arxiv},
	eprint = {1707.06507},
	keywords = {Computer Science - Databases},
	file = {Shah und Salles - 2018 - Actor-Relational Database Systems A Manifesto.pdf:C\:\\Users\\jjest\\Zotero\\storage\\NWA6MQUR\\Shah und Salles - 2018 - Actor-Relational Database Systems A Manifesto.pdf:application/pdf}
}

@book{buyya_cloud_2011,
	location = {Hoboken, N.J.},
	title = {Cloud computing : principles and paradigms},
	isbn = {978-0-470-88799-8},
	series = {Wiley series on parallel and distributed computing},
	publisher = {Wiley},
	author = {Buyya, Rajkumar and Broberg, James and Goscinski, Andrzej},
	date = {2011},
	lccn = {LO},
	keywords = {Informatik}
}

@inproceedings{pang_authenticating_2004,
	title = {Authenticating query results in edge computing},
	pages = {560--571},
	booktitle = {Proceedings. 20th International Conference on Data Engineering},
	publisher = {{IEEE}},
	author = {Pang, {HweeHwa} and Tan, K-L},
	date = {2004}
}

@online{noauthor_reference_2017,
	title = {Reference Architecture},
	url = {https://iiconsortium.org/pdf/OpenFog_Reference_Architecture_2_09_17.pdf},
	titleaddon = {{OpenFog} Consortium},
	urldate = {2020-08-18},
	date = {2017-09-02}
}

@book{fahmy_wireless_2016,
	title = {Wireless Sensor Networks: Concepts, Applications, Experimentation and Analysis},
	isbn = {978-981-10-0412-4},
	publisher = {Springer, Singapore},
	author = {Fahmy, Hossam Mahmoud Ahmad},
	date = {2016},
	file = {Mahmoud, Hossam und Fahmy, Ahmad - 2016 - Wireless Sensor Networks Concepts, Applications, .pdf:C\:\\Users\\jjest\\Zotero\\storage\\65IDT8JD\\Mahmoud, Hossam und Fahmy, Ahmad - 2016 - Wireless Sensor Networks Concepts, Applications, .pdf:application/pdf}
}

@incollection{fahmy_part_2016,
	title = {Part I: {WSN} Concepts and Applications},
	isbn = {978-981-10-0412-4},
	pages = {3--50},
	booktitle = {Wireless Sensor Networks: Concepts, Applications, Experimentation and Analysis},
	publisher = {Springer, Singapore},
	author = {Fahmy, Hossam Mahmoud Ahmad},
	date = {2016}
}

@incollection{akyildiz_chapter_2010,
	title = {Chapter 9: Application Layer},
	volume = {4},
	pages = {191--218},
	booktitle = {Wireless sensor networks},
	publisher = {John Wiley \& Sons},
	author = {Akyildiz, Ian F. and Vuran, Mehmet Can},
	date = {2010}
}

@incollection{akyildiz_chapter_2010-1,
	title = {Chapter 1: Introduction},
	volume = {4},
	pages = {1--15},
	booktitle = {Wireless sensor networks},
	publisher = {John Wiley \& Sons},
	author = {Akyildiz, Ian F. and Vuran, Mehmet Can},
	date = {2010}
}

@incollection{chang_internet_2019,
	title = {Internet of Things ({IoT}) and New Computing Paradigms},
	isbn = {978-1-119-52508-0},
	abstract = {Summary Commonly, an Internet of Things ({IoT}) system follows the architecture of the Cloud-centric Internet of Things ({CIoT}) in which the physical objects are represented in the form of Web resources that are managed by the servers in the global Internet. In general, the common {IoT} system involves three major technologies: embedded systems, middleware, and cloud services. Although the {CIoT} model is a common approach to implement {IoT} systems, it is facing the growing challenges in {IoT}. This chapter discusses foundations of computing paradigms for realizing emerging {IoT} applications, especially fog and edge computing, their background, characteristics, architectures and open challenges. It presents related technologies to fog and edge computing. The chapter describes how fog and edge can improve {CIoT} and explains the hierarchy of fog and edge computing environments. It illustrates the business models of fog and edge computing, and provides the information regarding the opportunities and challenges in fog and edge computing.},
	pages = {1--23},
	booktitle = {Fog and Edge Computing},
	publisher = {John Wiley \& Sons, Ltd},
	author = {Chang, Chii and Srirama, Satish Narayana and Buyya, Rajkumar},
	date = {2019},
	doi = {10.1002/9781119525080.ch1},
	note = {Section: 1
\_eprint: https://www.onlinelibrary.wiley.com/doi/pdf/10.1002/9781119525080.ch1},
	keywords = {business models, Cloud-centric Internet of Things, computing paradigms, fog and edge computing, Internet of Things, open challenges}
}

@incollection{chang_mobile_2020,
	title = {Mobile Fog Computing},
	isbn = {978-1-119-55171-3},
	abstract = {Summary The mobile Internet of Things ({IoT}) has become an indispensable element across various next-generation application domains. Specifically, mobile {IoT}-enhanced land vehicles facilitate the realization of intelligent transport systems, such as assisted-driving and autonomous driving. Further, mobile {IoT} improves the cost-performance efficiency of marine activities and the unmanned aerial vehicles-based mobile {IoT} by, for example, carrying out wildfire monitoring and bush firefighting missions to avoid risking life of human workers. In addition, user equipment such as smartphones also has been playing an important role in interconnecting body sensors to the central cloud for realizing smart healthcare. Although cloud-centric {IoT}, which relies on the distant central server to manage the data and to make decisions, is a common practical implementation, it faces the challenge in fulfilling time-critical responses derived from the dynamic factors of the end-to-end communication. Therefore, researchers have introduced fog computing architecture, which decentralizes the {IoT} systems in which the systems distribute certain processes and decision-making to the intermediate gateway nodes between the end-devices and the cloud. Explicitly, fog computing architecture is capable of overcoming the latency problem and also improving the efficiency of cloud-centric {IoT}. However, it also raises numerous new challenges in mobile {IoT} in terms of reliability, heterogeneity, serviceability, dynamic context factors, and so forth. In order to provide a guideline to mobile {IoT} and pervasive application developers who intend to integrate fog computing architecture, this chapter encompasses a comprehensive discussion on mobile fog computing on the topics of application domains, communication technologies, nonfunctional requirements, and open challenges.},
	pages = {1--41},
	booktitle = {Fog Computing},
	publisher = {John Wiley \& Sons, Ltd},
	author = {Chang, Chii and Hadachi, Amnir and Mass, Jakob and Srirama, Satish Narayana},
	date = {2020},
	doi = {10.1002/9781119551713.ch1},
	note = {Section: 1
\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/9781119551713.ch1},
	keywords = {land vehicular fog computing, marine fog computing, mobile fog computing, unmanned aerial vehicular fog computing, user equipment-based fog computing, wireless communication technologies}
}

@online{noauthor_apple_nodate,
	title = {Apple Multipeer Connectivity {API}},
	url = {https://developer.apple.com/documentation/multipeerconnectivity},
	urldate = {2020-08-13}
}

@inproceedings{bonnet_towards_2001,
	location = {Berlin, Heidelberg},
	title = {Towards Sensor Database Systems},
	isbn = {978-3-540-44498-5},
	abstract = {Sensor networks are being widely deployed for measurement, detection and surveillance applications. In these new applications, users issue long-running queries over a combination of stored data and sensor data. Most existing applications rely on a centralized system for collecting sensor data. These systems lack flexibility because data is extracted in a predefined way; also, they do not scale to a large number of devices because large volumes of raw data are transferred regardless of the queries that are submitted. In our new concept of sensor database system, queries dictate which data is extracted from the sensors. In this paper, we define the concept of sensor databases mixing stored data represented as relations and sensor data represented as time series. Each long-running query formulated over a sensor database defines a persistent view, which is maintained during a given time interval. We also describe the design and implementation of the {COUGAR} sensor database system.},
	pages = {3--14},
	booktitle = {Mobile Data Management},
	publisher = {Springer Berlin Heidelberg},
	author = {Bonnet, Philippe and Gehrke, Johannes and Seshadri, Praveen},
	editor = {Tan, Kian-Lee and Franklin, Michael J. and Lui, John Chi-Shing},
	date = {2001}
}

@article{demers_cougar_2003,
	title = {The Cougar Project: A Work-in-Progress Report},
	volume = {32},
	issn = {0163-5808},
	doi = {10.1145/959060.959070},
	pages = {53--59},
	number = {4},
	journaltitle = {{SIGMOD} Rec.},
	author = {Demers, Alan and Gehrke, Johannes and Rajaraman, Rajmohan and Trigoni, Niki and Yao, Yong},
	date = {2003-12},
	note = {Place: New York, {NY}, {USA}
Publisher: Association for Computing Machinery}
}

@book{akyildiz_wireless_2010,
	title = {Wireless sensor networks},
	volume = {4},
	publisher = {John Wiley \& Sons},
	author = {Akyildiz, Ian F. and Vuran, Mehmet Can},
	date = {2010},
	file = {Akyildiz und Vuran - 2010 - Wireless sensor networks.pdf:C\:\\Users\\jjest\\Zotero\\storage\\MFN8EGLT\\Akyildiz und Vuran - 2010 - Wireless sensor networks.pdf:application/pdf}
}

@article{friedrich_coordinated_2017,
	title = {Coordinated omission in nosql database benchmarking},
	journaltitle = {Datenbanksysteme für Business, Technologie und Web ({BTW} 2017)-Workshopband},
	author = {Friedrich, Steffen and Wingerath, Wolfram and Ritter, Norbert},
	date = {2017},
	note = {Publisher: Gesellschaft für Informatik {eV}}
}

@inproceedings{karimov_benchmarking_2018,
	title = {Benchmarking Distributed Stream Data Processing Systems},
	pages = {1507--1518},
	booktitle = {2018 {IEEE} 34th International Conference on Data Engineering ({ICDE})},
	author = {Karimov, J. and Rabl, T. and Katsifodimos, A. and Samarev, R. and Heiskanen, H. and Markl, V.},
	date = {2018}
}

@inproceedings{ahrenholz_integration_2011,
	title = {Integration of the {CORE} and {EMANE} Network Emulators},
	pages = {1870--1875},
	booktitle = {2011 - {MILCOM} 2011 Military Communications Conference},
	author = {Ahrenholz, J. and Goff, T. and Adamson, B.},
	date = {2011}
}

@online{noauthor_extendable_nodate,
	title = {Extendable Mobile Ad-hoc Network Emulator ({EMANE})},
	url = {https://www.nrl.navy.mil/itd/ncs/products/emane},
	urldate = {2020-08-04}
}

@inproceedings{ahrenholz_comparison_2010,
	title = {Comparison of {CORE} network emulation platforms},
	pages = {166--171},
	booktitle = {2010 - {MILCOM} 2010 {MILITARY} {COMMUNICATIONS} {CONFERENCE}},
	author = {Ahrenholz, J.},
	date = {2010}
}

@book{aggarwal_managing_2013,
	title = {Managing and Mining Sensor Data},
	isbn = {978-1-4614-6309-2},
	pagetotal = {534},
	publisher = {Springer {US}},
	author = {Aggarwal, Charu C.},
	date = {2013},
	file = {Aggarwal - 2013 - Managing and Mining Sensor Data.pdf:C\:\\Users\\jjest\\Zotero\\storage\\S8B4VSJ9\\Aggarwal - 2013 - Managing and Mining Sensor Data.pdf:application/pdf}
}

@article{zaharia_apache_2016,
	title = {Apache spark: a unified engine for big data processing},
	volume = {59},
	pages = {56--65},
	number = {11},
	journaltitle = {Communications of the {ACM}},
	author = {Zaharia, Matei and Xin, Reynold S and Wendell, Patrick and Das, Tathagata and Armbrust, Michael and Dave, Ankur and Meng, Xiangrui and Rosen, Josh and Venkataraman, Shivaram and Franklin, Michael J and {others}},
	date = {2016},
	note = {Publisher: {ACM} New York, {NY}, {USA}}
}

@online{noauthor_raspberry_nodate,
	title = {Raspberry Pi},
	url = {https://www.raspberrypi.org/},
	urldate = {2020-07-24},
	file = {Snapshot:C\:\\Users\\jjest\\Zotero\\storage\\7ELMVPCN\\www.raspberrypi.org.html:text/html}
}

@inproceedings{madden_design_2003,
	location = {New York, {NY}, {USA}},
	title = {The Design of an Acquisitional Query Processor for Sensor Networks},
	isbn = {1-58113-634-X},
	doi = {10.1145/872757.872817},
	series = {{SIGMOD} ’03},
	pages = {491--502},
	booktitle = {Proceedings of the 2003 {ACM} {SIGMOD} International Conference on Management of Data},
	publisher = {Association for Computing Machinery},
	author = {Madden, Samuel and Franklin, Michael J. and Hellerstein, Joseph M. and Hong, Wei},
	date = {2003},
	note = {event-place: San Diego, California},
	file = {Madden et al. - 2003 - The Design of an Acquisitional Query Processor for.pdf:C\:\\Users\\jjest\\Zotero\\storage\\2EGMS4ZB\\Madden et al. - 2003 - The Design of an Acquisitional Query Processor for.pdf:application/pdf}
}

@article{madden_tag_2003,
	title = {{TAG}: A Tiny {AGgregation} Service for Ad-Hoc Sensor Networks},
	volume = {36},
	issn = {0163-5980},
	doi = {10.1145/844128.844142},
	pages = {131--146},
	issue = {{SI}},
	journaltitle = {{SIGOPS} Oper. Syst. Rev.},
	author = {Madden, Samuel and Franklin, Michael J. and Hellerstein, Joseph M. and Hong, Wei},
	date = {2003-12},
	note = {Place: New York, {NY}, {USA}
Publisher: Association for Computing Machinery},
	file = {Madden et al. - 2003 - TAG A Tiny AGgregation Service for Ad-Hoc Sensor .pdf:C\:\\Users\\jjest\\Zotero\\storage\\IVCCV7MG\\Madden et al. - 2003 - TAG A Tiny AGgregation Service for Ad-Hoc Sensor .pdf:application/pdf}
}

@incollection{levis_tinyos_2005,
	title = {{TinyOS}: An operating system for sensor networks},
	pages = {115--148},
	booktitle = {Ambient intelligence},
	publisher = {Springer},
	author = {Levis, Philip and Madden, Samuel and Polastre, Joseph and Szewczyk, Robert and Whitehouse, Kamin and Woo, Alec and Gay, David and Hill, Jason and Welsh, Matt and Brewer, Eric and {others}},
	date = {2005}
}

@online{noauthor_orleans_nodate,
	title = {Orleans},
	url = {https://www.microsoft.com/en-us/research/project/orleans-virtual-actors/},
	abstract = {Project “Orleans” invented the Virtual Actor abstraction, which provides a straightforward approach to building distributed interactive applications, without the need to learn complex programming patterns for handling concurrency, fault tolerance, and resource management. Orleans applications scale-up automatically and are meant to be deployed in the cloud. It has been used heavily by a number of high-scale cloud services […]},
	titleaddon = {Microsoft Research},
	urldate = {2020-07-08},
	langid = {american}
}

@article{dean_mapreduce_2008,
	title = {{MapReduce}: Simplified Data Processing on Large Clusters},
	volume = {51},
	issn = {0001-0782},
	doi = {10.1145/1327452.1327492},
	pages = {107--113},
	number = {1},
	journaltitle = {Commun. {ACM}},
	author = {Dean, Jeffrey and Ghemawat, Sanjay},
	date = {2008-01},
	note = {Place: New York, {NY}, {USA}
Publisher: {ACM}}
}

@article{floratou_can_2012,
	title = {Can the Elephants Handle the {NoSQL} Onslaught?},
	volume = {5},
	issn = {2150-8097},
	doi = {10.14778/2367502.2367511},
	pages = {1712--1723},
	number = {12},
	journaltitle = {Proc. {VLDB} Endow.},
	author = {Floratou, Avrilia and Teletia, Nikhil and {DeWitt}, David J. and Patel, Jignesh M. and Zhang, Donghui},
	date = {2012-08},
	note = {Publisher: {VLDB} Endowment}
}

@inproceedings{pavlo_comparison_2009,
	location = {New York, {NY}, {USA}},
	title = {A Comparison of Approaches to Large-scale Data Analysis},
	isbn = {978-1-60558-551-2},
	doi = {10.1145/1559845.1559865},
	series = {{SIGMOD} '09},
	pages = {165--178},
	booktitle = {Proceedings of the 2009 {ACM} {SIGMOD} International Conference on Management of Data},
	publisher = {{ACM}},
	author = {Pavlo, Andrew and Paulson, Erik and Rasin, Alexander and Abadi, Daniel J. and {DeWitt}, David J. and Madden, Samuel and Stonebraker, Michael},
	date = {2009},
	note = {event-place: Providence, Rhode Island, {USA}},
	keywords = {benchmarks, mapreduce, parallel database}
}

@article{carbone_apache_2015,
	title = {Apache flink: Stream and batch processing in a single engine},
	volume = {36},
	number = {4},
	journaltitle = {Bulletin of the {IEEE} Computer Society Technical Committee on Data Engineering},
	author = {Carbone, Paris and Katsifodimos, Asterios and Ewen, Stephan and Markl, Volker and Haridi, Seif and Tzoumas, Kostas},
	date = {2015},
	note = {Publisher: {IEEE} Computer Society}
}

@article{alexandrov_stratosphere_2014,
	title = {The Stratosphere Platform for Big Data Analytics},
	volume = {23},
	issn = {1066-8888},
	doi = {10.1007/s00778-014-0357-y},
	pages = {939--964},
	number = {6},
	journaltitle = {The {VLDB} Journal},
	author = {Alexandrov, Alexander and Bergmann, Rico and Ewen, Stephan and Freytag, Johann-Christoph and Hueske, Fabian and Heise, Arvid and Kao, Odej and Leich, Marcus and Leser, Ulf and Markl, Volker and Naumann, Felix and Peters, Mathias and Rheinländer, Astrid and Sax, Matthias J. and Schelter, Sebastian and Höger, Mareike and Tzoumas, Kostas and Warneke, Daniel},
	date = {2014-12},
	note = {Place: Berlin, Heidelberg
Publisher: Springer-Verlag},
	keywords = {Big data, Data cleansing, Distributed systems, Graph processing, Parallel databases, Query Optimization, Query processing, Text mining}
}

@article{bernstein2014orleans,
	title = {Orleans: Distributed Virtual Actors for Programmability and Scalability},
	journal = {{MSR}-{TR}-2014-41},
	author = {Bernstein, Phil and Bykov, Sergey and Geller, Alan and Kliot, Gabriel and Thelin, Jorgen},
	year = {2014}
}

@online{noauthor_caf_nodate,
	title = {{CAF} - C++ Actor Framework},
	url = {https://actor-framework.org/},
	urldate = {2020-07-08}
}

@online{noauthor_erlang_nodate,
	title = {Erlang Programming Language},
	url = {https://www.erlang.org/},
	urldate = {2020-07-08}
}

@article{levis_trickle_2004,
	title = {Trickle: A Self-Regulating Algorithm for Code Propagation and Maintenance in Wireless Sensor Networks},
	abstract = {We present Trickle, an algorithm for propagating and maintaining code updates in wireless sensor networks. Borrowing techniques from the epidemic/gossip, scalable multicast, and wireless broadcast literature, Trickle uses a “polite gossip” policy, where motes periodically broadcast a code summary to local neighbors but stay quiet if they have recently heard a summary identical to theirs. When a mote hears an older summary than its own, it broadcasts an update. Instead of ﬂooding a network with packets, the algorithm controls the send rate so each mote hears a small trickle of packets, just enough to stay up to date. We show that with this simple mechanism, Trickle can scale to thousand-fold changes in network density, propagate new code in the order of seconds, and impose a maintenance cost on the order of a few sends an hour.},
	pages = {14},
	journaltitle = {Proceedings of the {USENIX} {NSDI} Conference},
	author = {Levis, Philip and Patel, Neil and Culler, David and Shenker, Scott},
	urldate = {2020-07-08},
	date = {2004},
	langid = {english},
	file = {Levis et al. - Trickle A Self-Regulating Algorithm for Code Prop.pdf:C\:\\Users\\jjest\\Zotero\\storage\\YU7T4WVT\\Levis et al. - Trickle A Self-Regulating Algorithm for Code Prop.pdf:application/pdf}
}

@book{lindholm_java_2020,
	title = {The Java® Virtual Machine Specification},
	url = {https://docs.oracle.com/javase/specs/jvms/se14/jvms14.pdf},
	series = {{JSR}-389 Java {SE} 14},
	pagetotal = {620},
	author = {Lindholm, Tim and Yellin, Frank and Bracha, Gilad and Buckley, Alex and Smith, Daniel},
	urldate = {2020-05-09},
	date = {2020-02-20},
	langid = {english},
	file = {Lindholm et al. - The Java® Virtual Machine Specification.pdf:C\:\\Users\\jjest\\Zotero\\storage\\W4G8G8QL\\Lindholm et al. - The Java® Virtual Machine Specification.pdf:application/pdf}
}

@article{charousset_revisiting_2016,
	title = {Revisiting actor programming in C++},
	volume = {45},
	issn = {14778424},
	doi = {10.1016/j.cl.2016.01.002},
	pages = {105--131},
	journaltitle = {Computer Languages, Systems \& Structures},
	shortjournal = {Computer Languages, Systems \& Structures},
	author = {Charousset, Dominik and Hiesgen, Raphael and Schmidt, Thomas C.},
	urldate = {2020-04-22},
	date = {2016-04},
	langid = {english},
	file = {Eingereichte Version:C\:\\Users\\jjest\\Zotero\\storage\\KBBRV5NK\\Charousset et al. - 2016 - Revisiting actor programming in C++.pdf:application/pdf}
}

@inproceedings{zeuch2020nebulastream,
  title={The NebulaStream Platform: Data and Application Management for the Internet of Things},
  author={Zeuch, Steffen and Chaudhary, Ankit and Monte, Bonaventura and Gavriilidis, Haralampos and Giouroukis, Dimitrios and Grulich, Philipp and Bre{\ss}, Sebastian and Traub, Jonas and Markl, Volker},
  booktitle={CIDR},
  year={2020}
}

@article{zeuch2020vloitnebulastream,
  title={NebulaStream: Complex analytics beyond the cloud},
  author={Zeuch, Steffen and Zacharatou, Eleni Tzirita and Zhang, Shuhao and Chatziliadis, Xenofon and Chaudhary, Ankit and Del Monte, Bonaventura and Giouroukis, Dimitrios and Grulich, Philipp M and Ziehn, Ariane and Mark, Volker},
  journal={VLIoT},
  year={2020},
}

@inproceedings{hewitt1973session,
	title = {A universal modular ACTOR formalism for artificial intelligence},
	booktitle = {IJCAI},
	author = {Hewitt, Carl and Bishop, Peter and Steiger, Richard},
	date = {1973},
	file = {Hewitt, Bishop, Steiger - 1973 - A universal modular ACTOR formalism for artificial intelligence.pdf:C\:\\Users\\jjest\\Zotero\\storage\\N85AEEK9\\Hewitt, Bishop, Steiger - 1973 - A universal modular ACTOR formalism for artificial intelligence.pdf:application/pdf}
}

@unpublished{charousset_streaming_2018,
	location = {C++ User Group Hamburg},
	title = {Streaming in {CAF}},
	url = {http://dominik.charousset.de/2018-10%20User%20Group%20Hamburg.pdf},
	author = {Charousset, Dominik},
	urldate = {2020-08-28},
	date = {2018-10-30}
}

@article{yao_cougar_2002,
	title = {The Cougar Approach to In-Network Query Processing in Sensor Networks},
	volume = {31},
	issn = {0163-5808},
	doi = {10.1145/601858.601861},
	abstract = {The widespread distribution and availability of small-scale sensors, actuators, and embedded processors is transforming the physical world into a computing platform. One such example is a sensor network consisting of a large number of sensor nodes that combine physical sensing capabilities such as temperature, light, or seismic sensors with networking and computation capabilities. Applications range from environmental control, warehouse inventory, and health care to military environments. Existing sensor networks assume that the sensors are preprogrammed and send data to a central frontend where the data is aggregated and stored for offline querying and analysis. This approach has two major drawbacks. First, the user cannot change the behavior of the system on the fly. Second, conservation of battery power is a major design factor, but a central system cannot make use of in-network programming, which trades costly communication for cheap local computation.In this paper, we introduce the Cougar approach to tasking sensor networks through declarative queries. Given a user query, a query optimizer generates an efficient query plan for in-network query processing, which can vastly reduce resource usage and thus extend the lifetime of a sensor network. In addition, since queries are asked in a declarative language, the user is shielded from the physical characteristics of the network. We give a short overview of sensor networks, propose a natural architecture for a data management system for sensor networks, and describe open research problems in this area.},
	pages = {9--18},
	number = {3},
	journaltitle = {{SIGMOD} Rec.},
	author = {Yao, Yong and Gehrke, Johannes},
	date = {2002-09}
}

@inproceedings{charousset_native_2013,
	title = {Native Actors – A Scalable Software Platform for Distributed, Heterogeneous Environments},
	booktitle = {SPLASH AGERE},
	author = {Charousset, Dominik and Schmidt, Thomas C. and Hiesgen, Raphael and Wählisch, Matthias},
	year = {2013}
}

@inproceedings{bayer_organization_1970,
	location = {New York, {NY}, {USA}},
	title = {Organization and Maintenance of Large Ordered Indices},
	isbn = {978-1-4503-7941-0},
	doi = {10.1145/1734663.1734671},
	series = {{SIGFIDET} '70},
	abstract = {Organization and maintenance of an index for a dynamic random access file is considered. It is assumed that the index must be kept on some pseudo random access backup store like a disc or a drum. The index organization described allows retrieval, insertion, and deletion of keys in time proportional to logk I where I is the size of the index and k is a device dependent natural number such that the performance of the scheme becomes near optimal. Storage utilization is at least 50\% but generally much higher. The pages of the index are organized in a special data-structure, so-called B-trees. The scheme is analyzed, performance bounds are obtained, and a near optimal k is computed. Experiments have been performed with indices up to 100,000 keys. An index of size 15,000 (100,000) can be maintained with an average of 9 (at least 4) transactions per second on an {IBM} 360/44 with a 2311 disc.},
	pages = {107--141},
	booktitle = {Proceedings of the 1970 {ACM} {SIGFIDET} (Now {SIGMOD}) Workshop on Data Description, Access and Control},
	publisher = {Association for Computing Machinery},
	author = {Bayer, R. and {McCreight}, E.},
	date = {1970},
	note = {event-place: Houston, Texas},
	keywords = {data structures, dynamic index maintenance, information retrieval, key deletion, key insertion, key retrieval, paging, random access files}
}

@inproceedings{benson_disco_2020,
	title = {Disco: Efficient Distributed Window Aggregation},
	doi = {10.5441/002/edbt.2020.48},
	pages = {423--426},
	booktitle = {Proceedings of the 23nd International Conference on Extending Database Technology, {EDBT} 2020, Copenhagen, Denmark, March 30 - April 02, 2020},
	publisher = {{OpenProceedings}.org},
	author = {Benson, Lawrence and Grulich, Philipp M. and Zeuch, Steffen and Markl, Volker and Rabl, Tilmann},
	editor = {Bonifati, Angela and Zhou, Yongluan and Salles, Marcos Antonio Vaz and Böhm, Alexander and Olteanu, Dan and Fletcher, George H. L. and Khan, Arijit and Yang, Bin},
	date = {2020}
}

@online{boner_jonas_reactive_2014,
	title = {The Reactive Manifesto},
	url = {https://www.reactivemanifesto.org/},
	author = {{Bonér, Jonas} and {Thompson, Martin} and {Kuhn, Roland} and {Farley, Dave}},
	urldate = {2020-08-31},
	date = {2014-09-16}
}

@online{noauthor_whatsapp_nodate,
	title = {{WhatsApp} on {GitHub}},
	url = {https://github.com/WhatsApp},
	urldate = {2020-08-31}
}

@incollection{akyildiz_chapter_2010-2,
	title = {Chapter 17: Wireless Underground Sensor Networks},
	volume = {4},
	pages = {443--480},
	booktitle = {Wireless sensor networks},
	publisher = {John Wiley \& Sons},
	author = {Akyildiz, Ian F. and Vuran, Mehmet Can},
	date = {2010}
}

@incollection{akyildiz_chapter_2010-3,
	title = {Chapter 16: Wireless Underwater Sensor Networks},
	volume = {4},
	pages = {399--440},
	booktitle = {Wireless sensor networks},
	publisher = {John Wiley \& Sons},
	author = {Akyildiz, Ian F. and Vuran, Mehmet Can},
	date = {2010}
}

@incollection{fahmy_part_2016-1,
	title = {Part {III}: {WSN} Manufacturers and Datasheets},
	isbn = {978-981-10-0412-4},
	pages = {495--601},
	booktitle = {Wireless Sensor Networks: Concepts, Applications, Experimentation and Analysis},
	publisher = {Springer, Singapore},
	author = {Fahmy, Hossam Mahmoud Ahmad},
	date = {2016}
}

@inproceedings{lantz_network_2010,
	title = {A Network in a Laptop: Rapid Prototyping for Software-Defined Networks},
	booktitle = {SIGCOMM HotNets},
	author = {Lantz, Bob and Heller, Brandon and {McKeown}, Nick},
	year = {2010},
}

@inproceedings{peuster_medicine_2016,
	title = {{MeDICINE}: Rapid prototyping of production-ready network services in multi-{PoP} environments},
	booktitle = {IEEE NFV-SDN},
	author = {Peuster, M. and Karl, H. and Rossem, S. van},
	year = {2016}
}

@inproceedings{gay_nesc_2003,
	location = {New York, {NY}, {USA}},
	title = {The {NesC} Language: A Holistic Approach to Networked Embedded Systems},
	isbn = {1-58113-662-5},
	doi = {10.1145/781131.781133},
	series = {{PLDI} '03},
	abstract = {We present {nesC}, a programming language for networked embedded systems that represent a new design space for application developers. An example of a networked embedded system is a sensor network, which consists of (potentially) thousands of tiny, low-power "motes," each of which execute concurrent, reactive programs that must operate with severe memory and power constraints.{nesC}'s contribution is to support the special needs of this domain by exposing a programming model that incorporates event-driven execution, a flexible concurrency model, and component-oriented application design. Restrictions on the programming model allow the {nesC} compiler to perform whole-program analyses, including data-race detection (which improves reliability) and aggressive function inlining (which reduces resource consumption).{nesC} has been used to implement {TinyOS}, a small operating system for sensor networks, as well as several significant sensor applications. {nesC} and {TinyOS} have been adopted by a large number of sensor network research groups, and our experience and evaluation of the language shows that it is effective at supporting the complex, concurrent programming style demanded by this new class of deeply networked systems.},
	pages = {1--11},
	booktitle = {Proceedings of the {ACM} {SIGPLAN} 2003 Conference on Programming Language Design and Implementation},
	publisher = {Association for Computing Machinery},
	author = {Gay, David and Levis, Philip and von Behren, Robert and Welsh, Matt and Brewer, Eric and Culler, David},
	date = {2003},
	note = {event-place: San Diego, California, {USA}},
	keywords = {C, components, concurrency, data races, first-order, modules, {nesC}, programming languages, {TinyOS}}
}

@misc{levis_tinyos_2006,
	title = {{TinyOS} Programming},
	url = {http://csl.stanford.edu/~pal/pubs/tinyos-programming.pdf},
	author = {Levis, Philip},
	urldate = {2020-09-15},
	date = {2006-06-28}
}

@report{jestram_report_2019,
	location = {Berlin},
	title = {Report: Stream and Batch Processing Systems for Big Data},
	institution = {{TU} Berlin Database Seminar Summerterm 2019},
	author = {Jestram, Johannes},
	date = {2019-07-12}
}